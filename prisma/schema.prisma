// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  isPremium     Boolean  @default(false)
  subscription  Subscription?
  passwords     Password[]
  securityLogs  SecurityLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String   @default("free") // free, premium, enterprise
  status          String   @default("active") // active, cancelled, expired
  paymentMethod   String?
  amount          Float?
  currency        String   @default("INR")
  startDate       DateTime @default(now())
  endDate         DateTime?
  razorpayOrderId String?
  razorpayPaymentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Password {
  id          String   @id @default(cuid())
  title       String
  username    String?
  password    String
  passwordIv  String?  // Initialization vector for encryption
  passwordTag String?  // Authentication tag for encryption
  url         String?
  notes       String?
  category    String   @default("general")
  icon        String?  // emoji for the password entry
  isFavorite  Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  categoryObj PasswordCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  details   String?  // JSON string
  ipAddress String
  userAgent String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
}

model PasswordCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String?  // emoji for the category
  description String?
  passwords   Password[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}